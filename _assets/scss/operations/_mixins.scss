.visually-hidden {
  position: absolute;
  overflow: hidden;
  clip: rect(0 0 0 0);
  height: 1px; width: 1px;
  margin: -1px; padding: 0; border: 0;
}

@mixin sq($size) {
  width: $size;
  height: $size;
}

@mixin button-filled ($color) {
  background-color: $color;
  background-image: linear-gradient(lighten($color,3%),rgba($color,0));
  @include text_color ($color);
  cursor:pointer;
  -webkit-text-stroke: 0px !important;
  transition: all .25s ease-in-out;
  padding: .7em 1em;
  font-size: inherit;
  border-radius:5px;
  text-decoration: none;
  border: 1px solid $color;

  &:hover {
    background-color: darken($color,5%);
    color: white;
  }

  @if lightness($color) >= 70% {
    &:hover {
      background-color: white;
      @include text_color (darken($color,10%));
    }
  }

  @if ($color) == palette(blue,base) {
    color: white !important;
  }
}



@mixin box-gradient($from, $to, $weight: 0) {
  $mix-main: mix($from, $to);
  $mix-sub-from: mix($mix-main, $from);
  $mix-sub-to: mix($mix-main, $to);

  box-shadow:
  // bottom left - mix of two colors plus start
  -1px   1px  0 -#{$weight} rgba($mix-sub-from, .25),
  // bottom mid - mix of two colors
   0 1px 0 0 rgba($mix-main, .5),
  // bottom right - mix of two colors plus end
   1px   1px  0 -#{$weight} rgba($mix-sub-to, .25);
}


@mixin font-gradient($from, $to, $dir) {
  background: linear-gradient($from, $to);
  background-clip: text;
  text-fill-color: transparent;
}




@mixin text_color ($color) {
  @if lightness($color) >= 75% {
    color: darken($color, 35%);
    text-shadow: 0 1px 0 lighten($color, 10%);
  } @else {
    color: lighten($color, 70%) !important;
    text-shadow: 0 1px 0 darken($color, 10%);
  }
}

@mixin button-stroke ($color,$hover) {
  background-color: transparent;
  color: $color;
  cursor:pointer;
  box-shadow: 0 0 0 4px $color inset;
  -webkit-text-stroke: 0px !important;
  transition: all .25s ease-in-out;
  padding: .7em 1em;
  font-size: inherit;
  text-transform: uppercase;
  letter-spacing: 3px;
  font-weight: 500;
  border-radius:5px;
  text-decoration: none;

  &:hover {
    color: $hover;
    box-shadow: 0 0 0 4px $hover inset;
  }

}


@mixin fade-line($color) {
  &:before {
    content: "";
    position: absolute;
    bottom: 2px;
    height: 1px;
    width: 100%;
    left: 0;
    background: linear-gradient(to right, rgba($color,0) 0%,rgba($color,1) 25%,rgba($color,1) 50%,rgba($color,1) 75%,rgba($color,0) 100%);
  }
}

@mixin abs-overlay {
  position: absolute;
  top: 0;
  bottom: 0;
  left: 0;
  right: 0;
  content: "";
}

@mixin s-overlay($color, $o: 1) {
  @include abs-overlay;
  background-color: rgba($color,$o);
}


// Background Things // ----------------
@mixin gradient_bg($theme: 'dark') {
  @if $theme == 'dark' {
    background-color: palette(gray,x-dark);
    background-image: linear-gradient(-45deg,palette(gray,x-dark),#353539);
  }

  @if $theme == 'light' {
    background-color: palette(gray,x-light);
    background-image: linear-gradient(-205deg,white,palette(gray,x-light));
  }
}

@mixin gradient_bg_light () {
  background-color: palette(gray,x-light);
  background-image: linear-gradient(-205deg,white,palette(gray,x-light));
}

@mixin ps-bg($img, $c1:null, $c1a:null, $c2:null, $c2a:null, $dir: $images_dir) {
  @if $c1 and $c1a and $c2 and $c2a {
    background: linear-gradient(rgba($c1,$c1a),rgba($c2,$c2a )),
    url($dir + $img) no-repeat center center;
    background-size: cover;
  } @else {
    background: url($dir + $img) no-repeat center center;
    background-size: cover;
  }
}



@mixin app-delay($delay: 7.5) {
  $t: 0;
  $i: -$delay;
  @while $i <= $delay/2 {
    &:nth-child(#{$t}) {
      animation-delay: $i+s;
    }
  $t: $t + 1;
  $i: $i + $delay/4;
}
}

@mixin text_color ($color) {
	@if lightness($color) >= 75% {
		color: darken($color, 35%);
		text-shadow: 0 1px 0 lighten($color, 10%);
	} @else {
		color: lighten($color, 70%);
		text-shadow: 0 1px 0 darken($color, 10%);
	}
}

@mixin vertical_align() {
	position: relative;
	top: 50%;
	transform: translateY(-50%);
}


@mixin pop($t: .4s) {
  transition: all $t cubic-bezier(.3,0,0,1.3);
}


@mixin center($dir:'both') {
  position: absolute;

  @if $dir == 'v' {
    top: 50%;
    transform: scale(1) translate3d(0,-50%,0);
  } @else if $dir == 'h' {
    left: 50%;
    transform: scale(1) translate3d(-50%, 0, 0);
  } @else {
    top: 50%;
    left: 50%;
    transform: scale(1) translate3d(-50%,-50%,0);
  }
}

@mixin centerY() {
  position: absolute;
  top: 50%;
  transform: translateY(-50%);
}
@mixin centerX() {
  position: absolute;
  left: 50%;
  transform: translateX(-50%);
}


@mixin placeholder {
  &.placeholder { @content; }
  &:-moz-placeholder { @content; }
  &::-moz-placeholder { @content; }
  &::-webkit-input-placeholder { @content; }
}


@mixin checkbox ($checkbox-color: $color) {
  background: white;
  float: left;
  height: 20px;
  margin-right: 0.5em;
  position: relative;
  width: 20px;
  input[type=checkbox] {
    visibility: hidden;
  }
  input[type=checkbox]:checked + label:after {
    filter: alpha(opacity=100);
    opacity: 1;
  }
  label {
    border: solid 4px $checkbox-color;
    cursor: pointer;
    height: 20px;
    left: 0px;
    position: absolute;
    top: 0px;
    width: 20px;
    &:after {
      border: 4px solid $checkbox-color;
      border-top: none;
      border-right: none;
      content: '';
      opacity: 0;
      height: .3em;
      left: 3px;
      position: absolute;
      top: 4px;
      transform: rotate(-45deg);
      width: .6em;
    }
    &:hover::after {
      filter: alpha(opacity=30);
      opacity: 0.3;
    }
  }
}


// Add Icon
//
// Adds an icon before or after the element it's applied to.
// $icon is expecting the enytpo \e001 format - check your variables.
// $side only looks for 'left' or 'right'.
// $icon-inner-padding sets the space between your element and the icon.
//
@mixin add-icon ($icon, $font-color: inherit, $display: inline-block, $side: left, $font-size: $icon-font-size, $icon-inner-padding: $icon-inner-padding) {
	$opposite-side: opposite-position($side);
	$icon-pseudo: 'before';
	@if ($side == right) {
		$icon-pseudo: 'after';
	}
	&:#{$icon-pseudo} {
		content: "#{$icon}";
		color: $font-color;
		display: $display;
		font-family: 'icons';
		font-size: $font-size;
		font-variant: normal;
		font-weight: normal;
		padding-#{$opposite-side}: $icon-inner-padding;
		speak: none;
		text-transform: none;
		line-height: 1;
		-webkit-font-smoothing: antialiased;
		-moz-osx-font-smoothing: grayscale;
	}
}

// Variables

// Icons
$icon-close: "\e606";
$icon-right: "\e605";
$icon-left: "\e607";
$icon-analytics: "\e600";
$icon-behavior: "\e601";
$icon-infotainment: "\e602";
$icon-location: "\e603";
$icon-diagnostics: "\e604";
$icon-safety: "\e608";
$icon-bt: "\e60a";
$icon-wifi: "\e60b";
$icon-data: "\e60c";
$icon-dataplus: "\e60d";
$icon-phone: "\e60e";



// Add Icon Mixin
$icon-font-size: 1.4em;
$icon-inner-padding: .4375em;